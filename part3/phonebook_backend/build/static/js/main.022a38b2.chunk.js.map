{"version":3,"sources":["components/Contact.js","components/List.js","components/Add.js","components/Search.js","components/Notification.js","services/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contact","person","deleteContact","name","number","onClick","id","List","list","map","contact","index","key","Add","addContact","handleNewContact","handleNewNum","onSubmit","value","onChange","required","type","Search","search","handleSearch","Notification","message","color","notifStyle","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setSearch","confirmMessage","setConfirmMessage","messageColor","setMessageColor","useEffect","contactService","initialContacts","event","target","preventDefault","contactInfo","some","window","confirm","individual","find","p","changedNumber","returnedContact","setTimeout","catch","error","filter","concat","toLowerCase","includes","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.022a38b2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Contact = ({ person, deleteContact }) => {\n    return (\n        <>\n            {person.name} {person.number}\n            <button onClick={() => deleteContact(person.id, person.name)}>delete</button>\n        </>\n    )\n}\n\nexport default Contact","import React from 'react'\nimport Contact from \"./Contact\"\n\nconst List = ({ list, deleteContact }) => {\n    return (\n        list.map((contact, index) => <div key={index}><Contact person={contact} deleteContact={deleteContact}/></div>) \n    )\n}\n\nexport default List","import React from 'react'\n\nconst Add = ({ name, number, addContact, handleNewContact, handleNewNum }) => {\n    return (\n        <form onSubmit={addContact}>\n            <div>name: <input value={name} onChange={handleNewContact} required/></div>\n            <div>number: <input value={number} onChange={handleNewNum} required/></div>\n            <div><button type=\"submit\">add</button></div>\n      </form>\n    )\n}\n\nexport default Add","import React from 'react'\n\nconst Search = ({ search, handleSearch }) => {\n    return (\n        <div>\n            filter shown with: <input type=\"text\" value={search} onChange={handleSearch} />\n        </div>\n    )\n}\n\nexport default Search","import React from 'react'\n\nconst Notification = ({ message, color }) => {\n    if (message === null) {\n        return null\n    }\n\n    const notifStyle = {\n        color: color,\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10,\n      }\n    \n    return (\n        <div style={notifStyle}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n  \nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport List from \"./components/List\"\nimport Add from \"./components/Add\"\nimport Search from \"./components/Search\"\nimport Notification from \"./components/Notification\"\nimport contactService from \"./services/contacts\"\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ search, setSearch ] = useState('')\n  const [ confirmMessage, setConfirmMessage ] = useState(null)\n  const [ messageColor, setMessageColor ] = useState(\"\")\n  \n  useEffect(() => {\n    contactService\n      .getAll()\n        .then(initialContacts => {\n        setPersons(initialContacts)\n      })\n  }, [])\n  \n  const handleNewContact = (event) => {\n    setNewName(event.target.value)\n  }\n  \n  const handleNewNum = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n  \n  const addContact = (event) => {\n    event.preventDefault()\n    \n    const contactInfo = {\n      name: newName,\n      number: newNumber\n    }\n  \n    if (persons.some(person => person.name === newName)) {\n      const confirm = window.confirm(`${newName} is already added to phonebook, replace the old number wiith a new one?`)\n      if (confirm) {\n        const individual = persons.find(p => p.name === newName)\n        const changedNumber = { ...individual, number: newNumber}\n        contactService\n          .update(changedNumber.id, changedNumber)\n            .then(returnedContact => {\n              setPersons(persons.map(person => person.id !== changedNumber.id ? person : returnedContact))\n              setConfirmMessage(`Updated ${returnedContact.name}`)\n              setMessageColor(\"green\")\n              setTimeout(() => {setConfirmMessage(null)}, 5000)\n          })\n            .catch(error => {\n              setConfirmMessage(`Information of ${changedNumber.name} has already been removed from server`)\n              setMessageColor(\"red\")\n              setTimeout(() => {setConfirmMessage(null)}, 5000)\n              setPersons(persons.filter(p => p.id !== changedNumber.id))\n          })\n      }\n    } else {\n        contactService\n          .create(contactInfo)\n            .then(returnedContact => {\n            setPersons(persons.concat(returnedContact))\n            setNewName('')\n            setNewNumber('')\n            setConfirmMessage(`Added ${returnedContact.name}`)\n            setMessageColor(\"green\")\n            setTimeout(() => {setConfirmMessage(null)}, 5000)\n          })\n    }\n  }\n\n  const deleteContactOf = (id, name) => {\n    const result = window.confirm(`Delete ${name} ?`)\n    if (result) {\n      contactService\n        .remove(id)\n      setPersons(persons.filter(person => person.id !== id))\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {confirmMessage\n      ? <Notification message={confirmMessage}  color={messageColor}/>\n      : null}\n      <Search search={search} handleSearch={handleSearch} />\n      <h3>add a new</h3>\n      <Add \n        name={newName}\n        number={newNumber}\n        addContact={addContact}\n        handleNewContact={handleNewContact}\n        handleNewNum={handleNewNum}\n        />\n      <h3>Numbers</h3>\n      <List \n        list={persons.filter(person => person.name.toLowerCase().includes(search.toLowerCase()))}\n        deleteContact={deleteContactOf}\n      />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}